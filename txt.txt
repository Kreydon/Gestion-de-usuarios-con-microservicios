Tengo este archivo de docker-compose.yml que lo que hace es crear un contenedor de una db de mysql:
"version: "3.1"

services:
  db:
    container_name: db
    image: mysql
    ports:
      - "3307:3306"
    command: --default-authentication-plugin=mysql_native_password --init-file /docker-entrypoint-initdb.d/init.sql
    restart: always
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: yes
      MYSQL_DATABASE: gestion_usuarios
    volumes:
      - db-data:/var/lib/mysql
      - ./db:/docker-entrypoint-initdb.d

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    networks:
      - red-gestion

volumes:
  db-data:"

Tengo los siguientes archivos que quiero agregar al docker compose, ten en cuenta que estan dentro de una carpeta llamada crud:
api.py:
"from create import CreateUserResource
from delete import DeleteUserResource
from flask import Flask
from flask_cors import CORS
from flask_restful import Api
from read import ReadUserResource
from update import UpdateUserResource

app = Flask(__name__)
CORS(app)
api = Api(app)

api.add_resource(CreateUserResource, "/create_users")
api.add_resource(ReadUserResource, "/read_users/<int:id_usuario>")
api.add_resource(UpdateUserResource, "/update_users/<int:user_id>")
api.add_resource(DeleteUserResource, "/delete_users/<int:user_id>")

if __name__ == "__main__":
    app.run(debug=True, port=5000)"

create.py:
"import json
from datetime import datetime

import mysql.connector
from flask import Flask, jsonify, request
from flask_cors import CORS
from flask_restful import Api, Resource

create = Flask(__name__)
CORS(create)
api = Api(create)

user_db_config = {
    "host": "localhost",
    "user": "root",
    "password": "14062003",
    "database": "gestion_usuarios",
}

log_db_config = {
    "host": "localhost",
    "user": "root",
    "password": "14062003",
    "database": "gestion_usuarios",
}


def get_user_db_connection():
    return mysql.connector.connect(**user_db_config)


def get_log_db_connection():
    return mysql.connector.connect(**log_db_config)


class CreateUserResource(Resource):
    def post(self):
        try:
            connection = get_user_db_connection()
            cursor = connection.cursor()

            datos = request.get_json()

            if not datos:
                return (
                    jsonify({"error": "Datos JSON no proporcionados o no v√°lidos"}),
                    400,
                )

            cursor.execute(
                "SELECT * FROM usuarios WHERE (noDocumento = %s) AND (estado = 'A')",
                (datos["noDocumento"],),
            )
            existing_user = cursor.fetchone()

            if existing_user:
                return jsonify({"error": "Ya existe un usuario con el mismo ID"}), 400

            consulta = "INSERT INTO usuarios (tipoDocumento, noDocumento, firstName, secondName, apellidos, fechaNacimiento, genero, correoElectronico, celular, fechaActualizacion, estado, foto) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, 'A', %s)"

            fecha_hora_actual = datetime.now()
            fecha_formateada = fecha_hora_actual.strftime("%Y-%m-%d %H:%M:%S")

            cursor.execute(
                consulta,
                (
                    datos["tipoDocumento"],
                    datos["noDocumento"],
                    datos["firstName"],
                    datos.get("secondName", None),
                    datos["apellidos"],
                    datos["fechaNacimiento"],
                    datos["genero"],
                    datos["correoElectronico"],
                    datos["celular"],
                    fecha_formateada,
                    json.dumps(datos.get("foto", None)),
                ),
            )

            connection.commit()
            return jsonify({"mensaje": "Usuario agregado correctamente"})
        except Exception as e:
            return jsonify({"error": str(e)})
        finally:
            cursor.close()
            connection.close()


if __name__ == "__main__":
    create.run(debug=True)"
Que cambios le tengo que hacer al docker compose para agregar esos dos algoritmos, ademas de que cambios le tengo que hacer a esos mismos codigos.